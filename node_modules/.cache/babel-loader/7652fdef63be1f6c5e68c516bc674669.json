{"ast":null,"code":"var _jsxFileName = \"/home/timloughrist/Code/flatiron/phase-02/phase-2-project/src/components/Challenge.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Challenge() {\n  _s();\n\n  const [timer, setTimer] = useState(0);\n  const [wordlength, setWordlength] = useState();\n\n  function handleSubmit(e) {\n    return setTimer(wordlength);\n  }\n\n  ;\n\n  function handleChange(e) {\n    return setWordlength(e.target.value.length);\n  }\n\n  ;\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    onSubmit: handleSubmit,\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      onChange: handleChange\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 19,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"submit\",\n      value: \"Click Me!\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 20,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: timer\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 18,\n    columnNumber: 9\n  }, this);\n}\n\n_s(Challenge, \"8ZO0sggDnnVnG2S1vVObZ11eJK8=\");\n\n_c = Challenge;\nexport default Challenge;\n/*\n-Add a controlled form that includes:\nA text input\nA button with the text of “Click Me!”\nA paragraph that has a counter that starts at 0\n-When they input text in the text field and submit it, the text input should reset. At the same time the counter should increment based on the word length\n\n-The counter will continue to increment based on word length and will never reset back to zero. So for example: if the student typed in hi and submitted 3 times, the counter would be at 6. \n*/\n\nvar _c;\n\n$RefreshReg$(_c, \"Challenge\");","map":{"version":3,"names":["React","useState","Challenge","timer","setTimer","wordlength","setWordlength","handleSubmit","e","handleChange","target","value","length"],"sources":["/home/timloughrist/Code/flatiron/phase-02/phase-2-project/src/components/Challenge.js"],"sourcesContent":["import React, { useState } from 'react';\n\n\nfunction Challenge() {\n\n    const [timer, setTimer] = useState(0);\n    const [wordlength, setWordlength] = useState();\n\n    function handleSubmit(e){\n        return setTimer(wordlength);\n    };\n\n    function handleChange(e) {\n        return setWordlength(e.target.value.length);\n    };\n\n    return (\n        <form onSubmit={handleSubmit}>\n            <input type=\"text\" onChange={handleChange} />\n            <input type=\"submit\" value=\"Click Me!\"/>\n            <p>{timer}</p>\n        </form>\n    )\n}\n\nexport default Challenge;\n\n/*\n-Add a controlled form that includes:\nA text input\nA button with the text of “Click Me!”\nA paragraph that has a counter that starts at 0\n-When they input text in the text field and submit it, the text input should reset. At the same time the counter should increment based on the word length\n\n-The counter will continue to increment based on word length and will never reset back to zero. So for example: if the student typed in hi and submitted 3 times, the counter would be at 6. \n*/"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;;;AAGA,SAASC,SAAT,GAAqB;EAAA;;EAEjB,MAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBH,QAAQ,CAAC,CAAD,CAAlC;EACA,MAAM,CAACI,UAAD,EAAaC,aAAb,IAA8BL,QAAQ,EAA5C;;EAEA,SAASM,YAAT,CAAsBC,CAAtB,EAAwB;IACpB,OAAOJ,QAAQ,CAACC,UAAD,CAAf;EACH;;EAAA;;EAED,SAASI,YAAT,CAAsBD,CAAtB,EAAyB;IACrB,OAAOF,aAAa,CAACE,CAAC,CAACE,MAAF,CAASC,KAAT,CAAeC,MAAhB,CAApB;EACH;;EAAA;EAED,oBACI;IAAM,QAAQ,EAAEL,YAAhB;IAAA,wBACI;MAAO,IAAI,EAAC,MAAZ;MAAmB,QAAQ,EAAEE;IAA7B;MAAA;MAAA;MAAA;IAAA,QADJ,eAEI;MAAO,IAAI,EAAC,QAAZ;MAAqB,KAAK,EAAC;IAA3B;MAAA;MAAA;MAAA;IAAA,QAFJ,eAGI;MAAA,UAAIN;IAAJ;MAAA;MAAA;MAAA;IAAA,QAHJ;EAAA;IAAA;IAAA;IAAA;EAAA,QADJ;AAOH;;GApBQD,S;;KAAAA,S;AAsBT,eAAeA,SAAf;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA"},"metadata":{},"sourceType":"module"}