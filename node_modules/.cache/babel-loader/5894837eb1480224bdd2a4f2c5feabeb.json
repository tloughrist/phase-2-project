{"ast":null,"code":"var _jsxFileName = \"/home/timloughrist/Code/flatiron/phase-02/phase-2-project/src/components/Formations/MyFormations.js\";\nimport React from \"react\";\nimport FormationCard from \"./FormationCard.js\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction MyFormations(_ref) {\n  let {\n    currentUser,\n    searchValue,\n    userData,\n    patchCurrentUser\n  } = _ref;\n\n  let displayFormations = /*#__PURE__*/_jsxDEV(\"h2\", {\n    children: \"No formations yet.\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 6,\n    columnNumber: 29\n  }, this);\n\n  if (currentUser.formations.length > 0) {\n    removeInactiveFormations().then(() => console.log(\"reached\")).then(() => {\n      displayFormations = currentUser.formations.map(el1 => /*#__PURE__*/_jsxDEV(FormationCard, {\n        formation: el1,\n        currentUser: currentUser,\n        userData: userData\n      }, el1.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 12,\n        columnNumber: 69\n      }, this));\n    });\n  }\n\n  function removeInactiveFormations() {\n    const inactiveFormations = currentUser.formations.filter(el1 => {\n      const owner = userData.find(el2 => el2.id === el1.admin);\n      const ownerFormArr = owner.formations.map(el2 => el2.id);\n      return !ownerFormArr.includes(el1.id);\n    });\n    const inactiveFormationsIdArr = inactiveFormations.map(el => el.id);\n    const sansFormations = currentUser.formations.filter(el => !inactiveFormationsIdArr.includes(el.id));\n    return patchCurrentUser({\n      formations: sansFormations\n    });\n  }\n\n  ;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"My Formations\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"formation-array-container\",\n      children: displayFormations\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 33,\n    columnNumber: 9\n  }, this);\n}\n\n_c = MyFormations;\n;\nexport default MyFormations;\n\nvar _c;\n\n$RefreshReg$(_c, \"MyFormations\");","map":{"version":3,"names":["React","FormationCard","MyFormations","currentUser","searchValue","userData","patchCurrentUser","displayFormations","formations","length","removeInactiveFormations","then","console","log","map","el1","id","inactiveFormations","filter","owner","find","el2","admin","ownerFormArr","includes","inactiveFormationsIdArr","el","sansFormations"],"sources":["/home/timloughrist/Code/flatiron/phase-02/phase-2-project/src/components/Formations/MyFormations.js"],"sourcesContent":["import React from \"react\";\nimport FormationCard from \"./FormationCard.js\"\n\nfunction MyFormations({ currentUser, searchValue, userData, patchCurrentUser }) {\n\n    let displayFormations = <h2>No formations yet.</h2>\n\n    if (currentUser.formations.length > 0) {\n        removeInactiveFormations()\n        .then(() => console.log(\"reached\"))\n        .then(() => {\n            displayFormations = currentUser.formations.map((el1) => <FormationCard\n                key={el1.id}\n                formation={el1}\n                currentUser={currentUser}\n                userData={userData}\n            />);\n        });\n    }\n    \n    function removeInactiveFormations(){\n        const inactiveFormations = currentUser.formations.filter((el1) => {\n            const owner = userData.find((el2) => el2.id === el1.admin);\n            const ownerFormArr = owner.formations.map((el2) => el2.id);\n            return !ownerFormArr.includes(el1.id);\n        });\n        const inactiveFormationsIdArr = inactiveFormations.map((el) => el.id);\n        const sansFormations = currentUser.formations.filter((el) => !inactiveFormationsIdArr.includes(el.id));\n        return patchCurrentUser({formations: sansFormations});\n    };\n        \n    return (\n        <div>\n            <h1>My Formations</h1>\n            <div id=\"formation-array-container\">\n                {displayFormations}\n            </div>\n        </div>\n    );\n};\n\nexport default MyFormations;"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,aAAP,MAA0B,oBAA1B;;;AAEA,SAASC,YAAT,OAAgF;EAAA,IAA1D;IAAEC,WAAF;IAAeC,WAAf;IAA4BC,QAA5B;IAAsCC;EAAtC,CAA0D;;EAE5E,IAAIC,iBAAiB,gBAAG;IAAA;EAAA;IAAA;IAAA;IAAA;EAAA,QAAxB;;EAEA,IAAIJ,WAAW,CAACK,UAAZ,CAAuBC,MAAvB,GAAgC,CAApC,EAAuC;IACnCC,wBAAwB,GACvBC,IADD,CACM,MAAMC,OAAO,CAACC,GAAR,CAAY,SAAZ,CADZ,EAECF,IAFD,CAEM,MAAM;MACRJ,iBAAiB,GAAGJ,WAAW,CAACK,UAAZ,CAAuBM,GAAvB,CAA4BC,GAAD,iBAAS,QAAC,aAAD;QAEpD,SAAS,EAAEA,GAFyC;QAGpD,WAAW,EAAEZ,WAHuC;QAIpD,QAAQ,EAAEE;MAJ0C,GAC/CU,GAAG,CAACC,EAD2C;QAAA;QAAA;QAAA;MAAA,QAApC,CAApB;IAMH,CATD;EAUH;;EAED,SAASN,wBAAT,GAAmC;IAC/B,MAAMO,kBAAkB,GAAGd,WAAW,CAACK,UAAZ,CAAuBU,MAAvB,CAA+BH,GAAD,IAAS;MAC9D,MAAMI,KAAK,GAAGd,QAAQ,CAACe,IAAT,CAAeC,GAAD,IAASA,GAAG,CAACL,EAAJ,KAAWD,GAAG,CAACO,KAAtC,CAAd;MACA,MAAMC,YAAY,GAAGJ,KAAK,CAACX,UAAN,CAAiBM,GAAjB,CAAsBO,GAAD,IAASA,GAAG,CAACL,EAAlC,CAArB;MACA,OAAO,CAACO,YAAY,CAACC,QAAb,CAAsBT,GAAG,CAACC,EAA1B,CAAR;IACH,CAJ0B,CAA3B;IAKA,MAAMS,uBAAuB,GAAGR,kBAAkB,CAACH,GAAnB,CAAwBY,EAAD,IAAQA,EAAE,CAACV,EAAlC,CAAhC;IACA,MAAMW,cAAc,GAAGxB,WAAW,CAACK,UAAZ,CAAuBU,MAAvB,CAA+BQ,EAAD,IAAQ,CAACD,uBAAuB,CAACD,QAAxB,CAAiCE,EAAE,CAACV,EAApC,CAAvC,CAAvB;IACA,OAAOV,gBAAgB,CAAC;MAACE,UAAU,EAAEmB;IAAb,CAAD,CAAvB;EACH;;EAAA;EAED,oBACI;IAAA,wBACI;MAAA;IAAA;MAAA;MAAA;MAAA;IAAA,QADJ,eAEI;MAAK,EAAE,EAAC,2BAAR;MAAA,UACKpB;IADL;MAAA;MAAA;MAAA;IAAA,QAFJ;EAAA;IAAA;IAAA;IAAA;EAAA,QADJ;AAQH;;KApCQL,Y;AAoCR;AAED,eAAeA,YAAf"},"metadata":{},"sourceType":"module"}