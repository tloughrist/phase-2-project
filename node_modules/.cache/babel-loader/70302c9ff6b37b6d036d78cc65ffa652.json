{"ast":null,"code":"var _jsxFileName = \"/home/timloughrist/Code/flatiron/phase-02/phase-2-project/src/components/Formations/MyFormations.js\";\nimport React, { useEffect } from \"react\";\nimport FormationCard from \"./FormationCard.js\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nlet displayFormations = /*#__PURE__*/_jsxDEV(\"h2\", {\n  children: \"No formations yet.\"\n}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 4,\n  columnNumber: 25\n}, this);\n\nfunction MyFormations(_ref) {\n  let {\n    currentUser,\n    searchValue,\n    userData,\n    patchCurrentUser,\n    isLoaded\n  } = _ref;\n  displayFormations = currentUser.formations.map(el1 => /*#__PURE__*/_jsxDEV(FormationCard, {\n    formation: el1,\n    currentUser: currentUser,\n    userData: userData\n  }, el1.id, false, {\n    fileName: _jsxFileName,\n    lineNumber: 8,\n    columnNumber: 61\n  }, this));\n  /*if (isLoaded && currentUser.formations.length > 0) {\n  useEffect(() => {\n      removeInactiveFormations()\n      .then(() => {\n          displayFormations = currentUser.formations.map((el1) => <FormationCard key={el1.id} formation={el1} currentUser={currentUser} userData={userData}/>)\n      });\n  }, []);\n  //}\n  function removeInactiveFormations(){\n      const inactiveFormations = currentUser.formations.filter((el1) => {\n          const owner = userData.find((el2) => el2.id === el1.admin);\n          const ownerFormArr = owner.formations.map((el2) => el2.id);\n          return !ownerFormArr.includes(el1.id);\n      });\n      const inactiveFormationsIdArr = inactiveFormations.map((el) => el.id);\n      const sansFormations = currentUser.formations.filter((el) => !inactiveFormationsIdArr.includes(el.id));\n      return patchCurrentUser({formations: sansFormations});\n  };\n  console.log(displayFormations)*/\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"My Formations\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"formation-array-container\",\n      children: displayFormations\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 30,\n    columnNumber: 9\n  }, this);\n}\n\n_c = MyFormations;\n;\nexport default MyFormations;\n\nvar _c;\n\n$RefreshReg$(_c, \"MyFormations\");","map":{"version":3,"names":["React","useEffect","FormationCard","displayFormations","MyFormations","currentUser","searchValue","userData","patchCurrentUser","isLoaded","formations","map","el1","id"],"sources":["/home/timloughrist/Code/flatiron/phase-02/phase-2-project/src/components/Formations/MyFormations.js"],"sourcesContent":["import React, { useEffect } from \"react\";\nimport FormationCard from \"./FormationCard.js\"\n\nlet displayFormations = <h2>No formations yet.</h2>\n\nfunction MyFormations({ currentUser, searchValue, userData, patchCurrentUser,isLoaded }) {\n\n    displayFormations = currentUser.formations.map((el1) => <FormationCard key={el1.id} formation={el1} currentUser={currentUser} userData={userData}/>)\n\n    /*if (isLoaded && currentUser.formations.length > 0) {\n    useEffect(() => {\n        removeInactiveFormations()\n        .then(() => {\n            displayFormations = currentUser.formations.map((el1) => <FormationCard key={el1.id} formation={el1} currentUser={currentUser} userData={userData}/>)\n        });\n    }, []);\n    //}\n    function removeInactiveFormations(){\n        const inactiveFormations = currentUser.formations.filter((el1) => {\n            const owner = userData.find((el2) => el2.id === el1.admin);\n            const ownerFormArr = owner.formations.map((el2) => el2.id);\n            return !ownerFormArr.includes(el1.id);\n        });\n        const inactiveFormationsIdArr = inactiveFormations.map((el) => el.id);\n        const sansFormations = currentUser.formations.filter((el) => !inactiveFormationsIdArr.includes(el.id));\n        return patchCurrentUser({formations: sansFormations});\n    };\n    console.log(displayFormations)*/\n    return (\n        <div>\n            <h1>My Formations</h1>\n            <div id=\"formation-array-container\">\n                {displayFormations}\n            </div>\n        </div>\n    );\n};\n\nexport default MyFormations;"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,aAAP,MAA0B,oBAA1B;;;AAEA,IAAIC,iBAAiB,gBAAG;EAAA;AAAA;EAAA;EAAA;EAAA;AAAA,QAAxB;;AAEA,SAASC,YAAT,OAAyF;EAAA,IAAnE;IAAEC,WAAF;IAAeC,WAAf;IAA4BC,QAA5B;IAAsCC,gBAAtC;IAAuDC;EAAvD,CAAmE;EAErFN,iBAAiB,GAAGE,WAAW,CAACK,UAAZ,CAAuBC,GAAvB,CAA4BC,GAAD,iBAAS,QAAC,aAAD;IAA4B,SAAS,EAAEA,GAAvC;IAA4C,WAAW,EAAEP,WAAzD;IAAsE,QAAQ,EAAEE;EAAhF,GAAoBK,GAAG,CAACC,EAAxB;IAAA;IAAA;IAAA;EAAA,QAApC,CAApB;EAEA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;EACI,oBACI;IAAA,wBACI;MAAA;IAAA;MAAA;MAAA;MAAA;IAAA,QADJ,eAEI;MAAK,EAAE,EAAC,2BAAR;MAAA,UACKV;IADL;MAAA;MAAA;MAAA;IAAA,QAFJ;EAAA;IAAA;IAAA;IAAA;EAAA,QADJ;AAQH;;KA/BQC,Y;AA+BR;AAED,eAAeA,YAAf"},"metadata":{},"sourceType":"module"}