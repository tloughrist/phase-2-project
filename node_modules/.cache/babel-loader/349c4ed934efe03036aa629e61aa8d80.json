{"ast":null,"code":"var _jsxFileName = \"/home/timloughrist/Code/flatiron/phase-02/phase-2-project/src/components/Formations/Formations.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport { Redirect, Route, Switch, useHistory } from \"react-router-dom\";\nimport MyFormations from \"./MyFormations.js\";\nimport NewFormation from \"./NewFormation.js\";\nimport FormationBar from \"./FormationBar.js\";\nimport Invitations from \"./Invitations.js\";\nimport Requests from \"./Requests.js\";\nimport FormationUsers from \"./FormationUsers.js\";\nimport FormationInfo from \"./FormationInfo.js\";\nimport FormationSettings from \"./FormationSettings.js\";\nimport Users from \"./Users.js\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Formations(_ref) {\n  _s();\n\n  let {\n    token,\n    currentUser,\n    patchCurrentUser,\n    updateCurrentUser,\n    userData,\n    updateUserData,\n    sendInvite,\n    rejectInvitation,\n    acceptInvitation,\n    patchUser,\n    isLoaded,\n    sendRequest,\n    acceptRequest,\n    rejectRequest,\n    leaveFormation\n  } = _ref;\n  const [searchValue, setSearchValue] = useState(\"\");\n  const history = useHistory();\n\n  if (token === \"valid\") {\n    const formationUsers = currentUser.formations.map(el => {\n      return /*#__PURE__*/_jsxDEV(Route, {\n        path: `/formations/${el.id}/users`,\n        children: /*#__PURE__*/_jsxDEV(FormationUsers, {\n          currentUser: currentUser,\n          userData: userData,\n          formation: el,\n          patchCurrentUser: patchCurrentUser,\n          patchUser: patchUser,\n          isLoaded: isLoaded\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 23,\n          columnNumber: 21\n        }, this)\n      }, `${el.id}users`, false, {\n        fileName: _jsxFileName,\n        lineNumber: 22,\n        columnNumber: 17\n      }, this);\n    });\n    const formationInfo = currentUser.formations.map(el => {\n      return /*#__PURE__*/_jsxDEV(Route, {\n        path: `/formations/${el.id}/info`,\n        children: /*#__PURE__*/_jsxDEV(FormationInfo, {\n          currentUser: currentUser,\n          formation: el,\n          token: token,\n          patchCurrentUser: patchCurrentUser\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 38,\n          columnNumber: 21\n        }, this)\n      }, `${el.id}info`, false, {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 17\n      }, this);\n    });\n    const formationSettings = currentUser.formations.map(el => {\n      return /*#__PURE__*/_jsxDEV(Route, {\n        path: `/formations/${el.id}/settings`,\n        children: /*#__PURE__*/_jsxDEV(FormationSettings, {\n          currentUser: currentUser,\n          formation: el,\n          patchCurrentUser: patchCurrentUser,\n          updateCurrentUser: updateCurrentUser,\n          userData: userData,\n          updateUserData: updateUserData\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 51,\n          columnNumber: 21\n        }, this)\n      }, `${el.id}settings`, false, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 17\n      }, this);\n    });\n\n    function getSearchValue(mode, value) {\n      setSearchValue(value);\n\n      if (mode === \"formation\") {\n        return history.push(\"/formations\");\n      } else if (mode === \"user\") {\n        return history.push(\"/formations/users\");\n      }\n    }\n\n    ;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"display-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Formations\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(FormationBar, {\n        getSearchValue: getSearchValue\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Switch, {\n        children: [/*#__PURE__*/_jsxDEV(Route, {\n          path: \"/formations/invitations\",\n          children: /*#__PURE__*/_jsxDEV(Invitations, {\n            currentUser: currentUser,\n            rejectInvitation: rejectInvitation,\n            acceptInvitation: acceptInvitation\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 78,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 77,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Route, {\n          path: \"/formations/requests\",\n          children: /*#__PURE__*/_jsxDEV(Requests, {\n            currentUser: currentUser,\n            userData: userData,\n            acceptRequest: acceptRequest,\n            rejectRequest: rejectRequest\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 85,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 84,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Route, {\n          path: \"/formations/newformation\",\n          children: /*#__PURE__*/_jsxDEV(NewFormation, {\n            currentUser: currentUser,\n            patchCurrentUser: patchCurrentUser,\n            updateCurrentUser: updateCurrentUser,\n            userData: userData\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 93,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 92,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Route, {\n          path: \"/formations/users\",\n          children: /*#__PURE__*/_jsxDEV(Users, {\n            userData: userData,\n            currentUser: currentUser,\n            searchValue: searchValue,\n            sendInvite: sendInvite,\n            sendRequest: sendRequest\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 101,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 100,\n          columnNumber: 21\n        }, this), formationUsers, formationInfo, formationSettings, /*#__PURE__*/_jsxDEV(Route, {\n          path: \"/formations\",\n          children: /*#__PURE__*/_jsxDEV(MyFormations, {\n            currentUser: currentUser,\n            searchValue: searchValue,\n            userData: userData,\n            patchCurrentUser: patchCurrentUser,\n            isLoaded: isLoaded,\n            leaveFormation: leaveFormation\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 113,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 112,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 13\n    }, this);\n  } else if (token === \"invalid\") {\n    return /*#__PURE__*/_jsxDEV(Redirect, {\n      to: \"/login\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 16\n    }, this);\n  } else {\n    return /*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 16\n    }, this);\n  }\n}\n\n_s(Formations, \"mzSH3jUo/0O8IfuPeNJvJKpEIKg=\", false, function () {\n  return [useHistory];\n});\n\n_c = Formations;\n;\nexport default Formations;\n\nvar _c;\n\n$RefreshReg$(_c, \"Formations\");","map":{"version":3,"names":["React","useState","useEffect","Redirect","Route","Switch","useHistory","MyFormations","NewFormation","FormationBar","Invitations","Requests","FormationUsers","FormationInfo","FormationSettings","Users","Formations","token","currentUser","patchCurrentUser","updateCurrentUser","userData","updateUserData","sendInvite","rejectInvitation","acceptInvitation","patchUser","isLoaded","sendRequest","acceptRequest","rejectRequest","leaveFormation","searchValue","setSearchValue","history","formationUsers","formations","map","el","id","formationInfo","formationSettings","getSearchValue","mode","value","push"],"sources":["/home/timloughrist/Code/flatiron/phase-02/phase-2-project/src/components/Formations/Formations.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { Redirect, Route, Switch, useHistory } from \"react-router-dom\";\nimport MyFormations from \"./MyFormations.js\";\nimport NewFormation from \"./NewFormation.js\";\nimport FormationBar from \"./FormationBar.js\";\nimport Invitations from \"./Invitations.js\";\nimport Requests from \"./Requests.js\";\nimport FormationUsers from \"./FormationUsers.js\";\nimport FormationInfo from \"./FormationInfo.js\";\nimport FormationSettings from \"./FormationSettings.js\";\nimport Users from \"./Users.js\";\n\nfunction Formations({ token, currentUser, patchCurrentUser, updateCurrentUser, userData, updateUserData, sendInvite, rejectInvitation, acceptInvitation, patchUser, isLoaded, sendRequest, acceptRequest, rejectRequest, leaveFormation}) {\n\n    const [searchValue, setSearchValue] = useState(\"\");\n    const history = useHistory();\n\n    if (token === \"valid\") {\n\n        const formationUsers = currentUser.formations.map((el) => {\n            return (\n                <Route key={`${el.id}users`} path={`/formations/${el.id}/users`}>\n                    <FormationUsers\n                        currentUser={currentUser}\n                        userData={userData}\n                        formation={el}\n                        patchCurrentUser={patchCurrentUser}\n                        patchUser={patchUser}\n                        isLoaded={isLoaded}\n                    />\n                </Route> \n            );\n        });\n\n        const formationInfo = currentUser.formations.map((el) => {\n            return (\n                <Route key={`${el.id}info`} path={`/formations/${el.id}/info`}>\n                    <FormationInfo\n                        currentUser={currentUser}\n                        formation={el}\n                        token={token}\n                        patchCurrentUser={patchCurrentUser}\n                    />\n                </Route> \n            );\n        });\n\n        const formationSettings = currentUser.formations.map((el) => {\n            return (\n                <Route key={`${el.id}settings`} path={`/formations/${el.id}/settings`}>\n                    <FormationSettings\n                        currentUser={currentUser}\n                        formation={el}\n                        patchCurrentUser={patchCurrentUser}\n                        updateCurrentUser={updateCurrentUser}\n                        userData={userData}\n                        updateUserData={updateUserData}\n                    />\n                </Route> \n            );\n        });\n\n        function getSearchValue(mode, value) {\n            setSearchValue(value);\n            if (mode === \"formation\") {\n                return history.push(\"/formations\");\n            } else if (mode === \"user\") {\n                return history.push(\"/formations/users\")\n            }\n        };\n    \n        return (\n            <div className=\"display-container\">\n                <h1>Formations</h1>\n                <FormationBar getSearchValue={getSearchValue} />\n                <Switch>\n                    <Route path=\"/formations/invitations\">\n                        <Invitations\n                            currentUser={currentUser}\n                            rejectInvitation={rejectInvitation}\n                            acceptInvitation={acceptInvitation}\n                        />\n                    </Route>\n                    <Route path=\"/formations/requests\">\n                        <Requests\n                            currentUser={currentUser}\n                            userData={userData}\n                            acceptRequest={acceptRequest}\n                            rejectRequest={rejectRequest}\n                        />\n                    </Route>\n                    <Route path=\"/formations/newformation\">\n                        <NewFormation\n                            currentUser={currentUser}\n                            patchCurrentUser={patchCurrentUser}\n                            updateCurrentUser={updateCurrentUser}\n                            userData={userData}\n                        />\n                    </Route>\n                    <Route path=\"/formations/users\">\n                        <Users\n                            userData={userData}\n                            currentUser={currentUser}\n                            searchValue={searchValue}\n                            sendInvite={sendInvite}\n                            sendRequest={sendRequest}\n                        />\n                    </Route>\n                    {formationUsers}\n                    {formationInfo}\n                    {formationSettings}\n                    <Route path=\"/formations\">\n                        <MyFormations\n                            currentUser={currentUser}\n                            searchValue={searchValue}\n                            userData={userData}\n                            patchCurrentUser={patchCurrentUser}\n                            isLoaded={isLoaded}\n                            leaveFormation={leaveFormation}\n                        />\n                    </Route>\n                </Switch>\n            </div>\n        );\n    } else if (token === \"invalid\") {\n        return <Redirect to=\"/login\" />;\n    } else {\n        return <h1>Loading...</h1>;\n    }};\n\nexport default Formations;"],"mappings":"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"},"metadata":{},"sourceType":"module"}